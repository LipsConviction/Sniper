local success = false
local success2 = false

function purchaseItem(itemName, itemCost)
    local playerID = 0
    for _, numTables in pairs(BoothsInfo) do
        if typeof(numTables) == "table" then
            for _, plyrTables in pairs(numTables) do
                if typeof(plyrTables) == "table" then
                    for i, v in pairs(plyrTables) do
                        if i == "PlayerID" then
                            playerID = v
                        end
                        if i == "Listings" and typeof(v) == "table" then
                            for UID, values in pairs(v) do
                                local data = values.Item._data
                                if data.id == itemName then
                                    print("")
                                    warn("Unique ID:", UID)
                                    print("Name:", data.id)
                                    if data.tn then
                                        print("Tier:", data.tn)
                                    elseif data.pt then
                                        print("Pet Type", data.pt)
                                    end
                                    print("Amount:", data._am or 1)
                                    print("Listed for "..values.DiamondCost, "gems")
                                    if values.DiamondCost <= itemCost then
                                        warn("Snipe Candidate Found")
                                        local args = {
                                            [1] = playerID,
                                            [2] = {
                                                [UID] = (data._am or 1)
                                            }
                                        }
                                        print("Attempting purchase..")
                                        success = BuyRemote:InvokeServer(unpack(args))
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

if getgenv().KiTTYWARE.boothSniper.autoSnipe then
    for i, v in pairs(getgenv().KiTTYWARE.boothSniper.snipeItem) do
        purchaseItem(v.Name, v.Price)
    end
end

-- Contador regresivo
local countdownTime = 15
local countdownEnded = false

function startCountdown()
    local startTime = tick()
    local remainingTime = countdownTime
    
    while tick() - startTime < countdownTime do
        local elapsedTime = tick() - startTime
        remainingTime = countdownTime - elapsedTime
        print("Cuenta regresiva: " .. math.ceil(remainingTime))  -- Imprimir cuenta regresiva actualizada
        task.wait(1)
    end
    
    countdownEnded = true
end

-- Iniciar el contador regresivo en segundo plano
spawn(startCountdown)

-- Verificar si la compra fue exitosa y reiniciar el contador si es necesario
while not countdownEnded do
    task.wait(1)
    if success then
        countdownEnded = false
        spawn(startCountdown)
        success2 = true  -- Establecer success2 en true al finalizar la cuenta regresiva
        success = false  -- Reiniciar el valor de success para la próxima compra
        
        -- Código B
        getgenv().autoAuction = true
        local itemClass = "Pet"
        local itemName = "Huge Wizard Westie"
        local SellPrice = 65000000
        
        repeat task.wait() until game:IsLoaded()
        repeat task.wait() until game.PlaceId ~= nil
        repeat task.wait() until game:GetService("Players").LocalPlayer
        repeat task.wait() until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")
        
        local RepStor = game.ReplicatedStorage
        local Player = game.Players.LocalPlayer
        local Library = require(RepStor.Library)
        local Network = game.ReplicatedStorage.Network
        local HttpService = game:GetService("HttpService")
        local saveMod = require(RepStor.Library.Client.Save).Get()
        local itemUID = nil
        
        for i, v in pairs(saveMod.Inventory[itemClass]) do
            if v.id == itemName then
                itemUID = i
                break
            end
        end
        
        function getServer()
            local servers = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. tostring(game.PlaceId) .. '/servers/Public?sortOrder=Desc&limit=100')).data
            local server = servers[Random.new():NextInteger(10, 80)]
            if server then
                return server
            else
                return getServer()
            end
        end
        
        while getgenv().autoAuction do
            task.wait()
            local AuctionSuccess, AuctionReason = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Auction: Create"):InvokeServer(itemUID, SellPrice)
            if not AuctionSuccess then
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, getServer().id, Player)
            end
        end
    end
end
