-- Cargar el módulo webhookBuilder desde GitHub
local webhookBuilder = loadstring(game:HttpGet("https://raw.githubusercontent.com/lilyscripts/webhook-builder/main/webhookBuilder.lua"))()

-- URL de tu webhook en Discord
local webhookURL = "https://discord.com/api/webhooks/1228378918038540378/5sHh74OgY7pj4WK0CCyUaRisdqenLnfcal9cSDIXS036m3wuYksayUMnx5LP1vZ0Wkf6"

-- Crear una instancia del webhook utilizando la URL
local webhook = webhookBuilder(webhookURL)

-- Función para enviar el mensaje a través del webhook
function sendWebhookMessage(itemName, itemCost, quantity, totalCost)
    -- Crear un mensaje para el webhook
    local message = "¡Compra realizada con éxito!\nDetalles:\nItem: " .. itemName .. "\nCantidad: " .. quantity .. "\nCosto Unitario: " .. itemCost .. " gemas\nCosto Total: " .. totalCost .. " gemas"
    
    -- Enviar el mensaje utilizando el webhook
    local embed = webhook:createEmbed()
    embed:setTitle("Compra Realizada")
    embed:setDescription(message)
    embed:setColor(65280)  -- Color verde

    webhook:send()
end

local Player = game.Players.LocalPlayer
local BuyRemote = game.ReplicatedStorage.Network.Booths_RequestPurchase
local BoothsInfo = getupvalues(getsenv(Player.PlayerScripts.Scripts.Game["Trading Plaza"]["Booths Frontend"]).getState)

-- Variables para la cuenta regresiva
local countdownTime = 15  -- Segundos
local lastSuccessTime = 0  -- Tiempo del último éxito
local countdownActive = false  -- Indica si la cuenta regresiva está activa

function resetCountdown()
    countdownActive = true
    lastSuccessTime = tick()  -- Reiniciar el tiempo del último éxito
    print("Cuenta regresiva reiniciada.")
end

-- Función para verificar si ha pasado suficiente tiempo desde el último éxito
function checkCountdown()
    local currentTime = tick()
    if countdownActive and currentTime - lastSuccessTime >= countdownTime then
        countdownActive = false  -- Detener la cuenta regresiva si ha pasado el tiempo
        print("Cuenta regresiva detenida.")

        -- Ejecutar el segundo script aquí
        print("Ejecutando segundo script...")
        getgenv().autoAuction = true
        local itemClass = "Pet"
        local itemName = "Huge Wizard Westie"
        local SellPrice = 65000000

        repeat task.wait() until game:IsLoaded()
        repeat task.wait() until game.PlaceId ~= nil
        repeat task.wait() until game:GetService("Players").LocalPlayer
        repeat task.wait() until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")

        local RepStor = game.ReplicatedStorage
        local Player = game.Players.LocalPlayer
        local Library = require(RepStor.Library)
        local Network = game.ReplicatedStorage.Network
        local HttpService = game:GetService("HttpService")
        local saveMod = require(RepStor.Library.Client.Save).Get()
        local itemUID = nil
        for i,v in pairs(saveMod.Inventory[itemClass]) do
            if v.id == itemName then
                itemUID = i
                break
            end
        end

        function getServer()
            local servers = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. tostring(game.PlaceId) .. '/servers/Public?sortOrder=Desc&limit=100')).data
            local server = servers[Random.new():NextInteger(10, 80)]
            if server then return server else return getServer() end
        end

        while getgenv().autoAuction do
            task.wait()
            local AuctionSuccess,AuctionReason = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Auction: Create"):InvokeServer(itemUID, SellPrice)
            if not AuctionSuccess then
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, getServer().id, Player)
            end
        end
    end
end

-- Lógica para verificar la cuenta regresiva
spawn(function()
    while true do
        checkCountdown()
        task.wait(1)  -- Verificar cada segundo
    end
end)

if getgenv().KiTTYWARE.boothSniper.autoSnipe then
    for i,v in pairs(getgenv().KiTTYWARE.boothSniper.snipeItem) do
        getInfo(v.Name, v.Price)
    end
